```import java.util.Scanner;



public class Main {

    public static void main(String[] args) {



        char[][] grid = {

            {' ', '|', ' ', '|', ' '},

            {'-', '+', '-', '+', '-'},

            {' ', '|', ' ', '|', ' '},

            {'-', '+', '-', '+', '-'},

            {' ', '|', ' ', '|', ' '}

        };



        char[] marks = {'1', '2'};

        boolean playerXTurn = true;



        Scanner scanner = new Scanner(System.in);



        while (true) {

            for (int i = 0; i < grid.length; i++) {

                for (int j = 0; j < grid[i].length; j++) {

                    System.out.print(grid[i][j]);

                }

                System.out.println();

            }



            System.out.println("Enter row (1-3) for " + (playerXTurn? "1" : "2") + ": ");

            int row = scanner.nextInt();

            System.out.println("Enter column (1-3) for " + (playerXTurn? "1" : "2") + ": ");

            int col = scanner.nextInt();



            if (row >= 1 && row <= 3 && col >= 1 && col <= 3) {

                if (grid[2*row-2][col*2-2] == ' ') {

                    grid[2*row-2][col*2-2] = playerXTurn? '1' : '2';

                    playerXTurn = !playerXTurn;

                    if (checkWin(grid, marks[playerXTurn? 0 : 1])) {

                        System.out.println("Player " + (playerXTurn? "1" : "2") + " has won!");

                        break;

                    }

                } else {

                    System.out.println("Invalid input. Please enter a row and column with an empty space.");

                }

            } else {

                System.out.println("Invalid input. Please enter a row and column between 1 and 3.");

            }

        }

    }



    private static boolean checkWin(char[][] grid, char mark) {

        return (checkRow(grid, mark) || checkCol(grid, mark) || checkDiag(grid, mark));

    }



    private static boolean checkRow(char[][] grid, char mark) {

        for (int i = 0; i < grid.length; i += 2) {

            if (!checkLine(grid[i], mark)) {

                return false;

            }

        }

        return true;

    }



    private static boolean checkCol(char[][] grid, char mark) {

        for (int i = 0; i < grid.length; i++) {

            if (!checkLine(new char[] {grid[0][i], grid[2][i], grid[4][i]}, mark)) {

                return false;

            }

        }

        return true;

    }



    private static boolean checkDiag(char[][] grid, char mark) {

        return (checkLine(new char[] {grid[0][0], grid[2][2], grid[4][4]}, mark)

                && checkLine(new char[] {grid[0][4], grid[2][2], grid[4][0]}, mark));

    }



    private static boolean checkLine(char[] line, char mark) {

        return (line[0] == mark && line[1] == mark && line[2] == mark);

    }

}```
